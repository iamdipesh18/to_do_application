ðŸ”¹ STEP 1: Project Setup & Dependencies
âœ… Create Flutter project

âœ… Add dependencies to pubspec.yaml

âœ… Set up initial folder structure

âœ… Run flutter pub get
-------------------------------------------------------------------------
ðŸ”¹ STEP 2: Hive Initialization
âœ… Setup Hive in main.dart

âœ… Initialize Hive box for Task

âœ… Register Hive adapters
-------------------------------------------------------------------------
ðŸ”¹ STEP 3: TaskPriority Enum
âœ… Create TaskPriority enum inside core/enums/priority.dart

âœ… Add High, Medium, Low levels
-------------------------------------------------------------------------
ðŸ”¹ STEP 4: Task Model for Hive (Data Layer)
âœ… Create task_model.dart in data/models/

âœ… Annotate with @HiveType, @HiveField

âœ… Generate Hive TypeAdapter using build_runner
-------------------------------------------------------------------------
ðŸ”¹ STEP 5: Domain Entity (Clean Model)
âœ… Create clean Task entity in domain/entities/

âœ… This model has no Hive or Flutter dependencies
-------------------------------------------------------------------------
ðŸ”¹ STEP 6: Repository Layer
âœ… domain/repositories/task_repository.dart â†’ abstract interface

âœ… data/repositories/task_repository_impl.dart â†’ actual implementation
-------------------------------------------------------------------------
ðŸ”¹ STEP 7: Local Data Source (Hive CRUD Operations)
âœ… Create local_task_data_source.dart

âœ… Write methods: add, delete, update, getAll
-------------------------------------------------------------------------
ðŸ”¹ STEP 8: Use Cases (Domain Logic)
Create one Dart file per task inside domain/usecases/:

âœ… add_task.dart
 
âœ… get_tasks.dart

âœ… delete_task.dart

âœ… update_task.dart

âœ… toggle_task_status.dart
-------------------------------------------------------------------------
ðŸ”¹ STEP 9: BLoC for Task Management
âœ… Create task_bloc/ folder

âœ… task_bloc.dart: main logic

âœ… task_event.dart: defines all possible user actions

âœ… task_state.dart: represents UI state (task list, loading, etc.)

ðŸ”¹ STEP 10: BLoC for Filtering Tasks
âœ… Create filter_bloc/

âœ… Handles All / Active / Completed filters

âœ… Works in parallel with task_bloc

ðŸ”¹ STEP 11: Build UI
âœ… Create presentation/screens/home_screen.dart

âœ… Show list of tasks

âœ… Show add/edit buttons

âœ… Hook BLoC into UI using BlocBuilder and BlocListener

ðŸ”¹ STEP 12: Reusable UI Components
âœ… task_tile.dart: each task row with checkbox, title, priority

âœ… task_form.dart: used for adding/editing task (title, description, due date)

âœ… filter_buttons.dart: toggle between All, Active, Completed

ðŸ”¹ STEP 13: Dialog UI for Add/Edit Task
âœ… Create task_dialog.dart that:

âœ… Opens when FAB is tapped

âœ… Can be used to edit an existing task or add a new one

ðŸ”¹ STEP 14: Sorting by Due Date
âœ… Implement optional sorting feature (ascending or descending due date)

âœ… Use basic List.sort() on task list

ðŸ”¹ STEP 15: (Optional) Dark/Light Theme
âœ… Add toggle using ThemeData.light() and ThemeData.dark()

ðŸ”¹ STEP 16: README + GitHub
âœ… Create a README.md with:

âœ… Project overview

âœ… How to run the app

âœ… Architecture summary

âœ… Screenshots (optional)

âœ… Push to GitHub (public repo)

ðŸ”¹ STEP 17: Final Polish
âœ… Test functionality

âœ… Ensure UI is responsive and clean

Optional: Add animations or transitions