lib/
├── main.dart
├── app.dart
├── core/
│   ├── constants/
│   │   └── colors.dart
│   ├── enums/
│   │   └── priority.dart
│   └── utils/
│       └── date_formatter.dart
├── data/
│   ├── models/
│   │   └── task_model.dart
│   ├── sources/
│   │   └── local_task_data_source.dart
│   └── repositories/
│       └── task_repository_impl.dart
├── domain/
│   ├── entities/
│   │   └── task.dart
│   ├── repositories/
│   │   └── task_repository.dart
│   └── usecases/
│       ├── add_task.dart
│       ├── delete_task.dart
│       ├── get_tasks.dart
│       ├── update_task.dart
│       └── toggle_task_status.dart
├── logic/
│   └── blocs/
│       ├── task_bloc/
│       │   ├── task_bloc.dart
│       │   ├── task_event.dart
│       │   └── task_state.dart
│       └── filter_bloc/
│           ├── filter_bloc.dart
│           ├── filter_event.dart
│           └── filter_state.dart
├── presentation/
│   ├── screens/
│   │   └── home_screen.dart
│   ├── widgets/
│   │   ├── task_tile.dart
│   │   ├── task_form.dart
│   │   └── filter_buttons.dart
│   └── dialogs/
│       └── task_dialog.dart

functions and stuffs

✅ Simple Explanation for Each Section
🟦 main.dart
This is where your app starts running.

You will initialize Hive here and launch your App widget.

🟦 app.dart
This holds the root MaterialApp.

Here you define your theme, routes, and home screen.

It's like the wrapper for your whole UI.

📁 core/ – General-purpose helpers and shared files
📄 core/constants/colors.dart
Define all the colors you use in your app.

Helps you avoid repeating color codes like Colors.blue[200].

📄 core/enums/priority.dart
You’ll define enum TaskPriority { high, medium, low }.

Helps you add priority levels to tasks.

📄 core/utils/date_formatter.dart
You’ll create simple functions like formatDate(DateTime date) to show nice date strings.

📁 data/ – Where data is stored and retrieved
📄 data/models/task_model.dart
The Hive-compatible version of a task.

This is the class Hive will store in local DB.

It will have annotations like @HiveField(0).

📄 data/sources/local_task_data_source.dart
This is where Hive is used directly: box.put(), box.get(), etc.

Think of it as a worker that reads/writes your tasks.

📄 data/repositories/task_repository_impl.dart
This class uses the data source to do the actual work.

Implements the TaskRepository interface from the domain layer.

📁 domain/ – Pure logic (doesn’t care about storage or UI)
📄 domain/entities/task.dart
A simple Task class with fields like id, title, isCompleted, etc.

This is your clean model, not tied to Hive or Flutter.

📄 domain/repositories/task_repository.dart
An abstract class (interface) that defines what a repository should do.

Example methods: addTask(), deleteTask(), getAllTasks().

📁 domain/usecases/
Each file is one specific task (use case):

add_task.dart: logic to add a task

delete_task.dart: logic to delete

get_tasks.dart: fetch list of tasks

update_task.dart: update title, desc, etc.

toggle_task_status.dart: mark complete/incomplete

✅ These are plain Dart classes that call the repository.

📁 logic/ – App Logic using flutter_bloc
📁 task_bloc/
task_event.dart: all actions (add, delete, update, etc.)

task_state.dart: what the screen should show (list of tasks)

task_bloc.dart: the main logic handling all events and updating state

📁 filter_bloc/
Handles the filter buttons (All, Active, Completed)

This layer is like the brain of your app that reacts to user actions.

📁 presentation/ – UI: Screens, Widgets, Dialogs
📄 screens/home_screen.dart
This is the main screen.

It shows the list of tasks and a button to add new ones.

📁 widgets/
task_tile.dart: one row showing a single task

task_form.dart: the input fields (title, description)

filter_buttons.dart: buttons for All, Active, Completed

📁 dialogs/
task_dialog.dart: A popup to add/edit a task